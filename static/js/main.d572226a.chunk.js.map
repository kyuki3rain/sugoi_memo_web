{"version":3,"sources":["helpers/useWindowDimensions.tsx","consts/languages.ts","components/Editor.tsx","pages/EditorPage.tsx","reducer.ts","helpers/myAPI.ts","Main.tsx","App.js","reportWebVitals.js","index.js"],"names":["useWindowDimensions","getWindowDimensions","window","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","onResize","addEventListener","removeEventListener","LANGUAGES","Editor","useContext","Content","state","dispatch","language","setLanguage","console","log","theme","options","selectOnLineNumbers","value","text","onChange","type","editorDidMount","editor","monaco","focus","addCommand","KeyMod","CtrlCmd","KeyCode","Enter","position","getPosition","txts","getValue","split","model","getModel","cmd","splice","lineNumber","replace","languages","includes","setModelLanguage","setValue","join","setPosition","column","length","EditorPage","myReducer","action","myAPI","loadText","a","App","styled","div","initialState","createContext","Main","useReducer","useInterval","save","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d572226a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n \nconst useWindowDimensions = () => {\n \n  const getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  }\n \n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    const onResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n  return windowDimensions;\n}\n\nexport default useWindowDimensions;","export const LANGUAGES = [\"html\", \"css\", \"javascript\", \"json\"]\n\nexport default LANGUAGES","import React, { useState, useContext } from 'react'\nimport { Content } from '../Main';\nimport MonacoEditor, { EditorDidMount } from 'react-monaco-editor';\nimport useWindowDimensions from '../helpers/useWindowDimensions';\nimport languages from \"../consts/languages\";\n\nconst Editor: React.FC = () => {\n  const { state, dispatch } = useContext(Content);\n  const { width, height } = useWindowDimensions();\n  const options = {\n    selectOnLineNumbers: true\n  };\n\n  const [language, setLanguage] = useState(\"html\");\n  \n  const ditMount: EditorDidMount = (editor, monaco) => {\n    editor.focus();\n    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {\n      const position = editor.getPosition();\n      const txts = editor.getValue().split(/\\n/);\n      const model = editor.getModel();\n      if(!position || !model) return false;\n\n      const cmd = txts.splice(position.lineNumber-1, 1)[0].replace(/\\s+/g, \"\");\n      if(languages.includes(cmd)){\n        monaco.editor.setModelLanguage(model, cmd);\n        setLanguage(cmd);\n        editor.setValue(txts.join(\"\\n\"));\n        editor.setPosition({column: 1, lineNumber: txts.length});\n      }\n    });\n  }\n  console.log(language);\n\n  return (\n    <MonacoEditor\n      width={width}\n      height={height}\n      language={language}\n      theme=\"vs\"\n      options={options}\n      value={state.text}\n      onChange={ (text) => dispatch({type: \"setText\", text})}\n      editorDidMount={ditMount}\n    />\n  )\n}\n\nexport default Editor;","import React from 'react'\nimport Editor from \"../components/Editor\"\n\nconst EditorPage: React.FC = () => <Editor></Editor>\n\nexport default EditorPage;","export type StateType = {\n  text: string;\n};\n\nexport type ActionType = StateType & {\n  type: string;\n};\n\nexport const myReducer = (state: StateType, action: ActionType) => {\n  switch (action.type) {\n    case 'setText':\n      return { ...state, text: action.text };\n    default:\n      return state;\n  }\n};","import { ActionType } from \"../reducer\";\n\nconst { myAPI } = window;\n\nexport const loadText = async (dispatch: React.Dispatch<ActionType>) => {\n  if(myAPI){\n    const text = await myAPI.loadText();\n    dispatch({ type: \"setText\", text });\n  }\n}\n\nexport const saveText = (text: string) => {\n  if(myAPI){\n    myAPI.save(text);\n  }\n}","import React, { useEffect, useReducer, createContext } from \"react\";\nimport 'reset-css';\nimport EditorPage from \"./pages/EditorPage\";\nimport { ActionType, myReducer, StateType } from \"./reducer\";\nimport styled from \"styled-components\";\nimport { useInterval } from 'use-interval';\nimport { loadText, saveText } from \"./helpers/myAPI\";\n\nconst App = styled.div`\n    height: 100%;\n    width:  100%;\n    margin: 0;\n    overflow: hidden;\n`\n\nconst initialState = { text: '' };\ntype ContextType = {\n  state: StateType;\n  dispatch: React.Dispatch<ActionType>;\n};\n\nexport const Content = createContext({} as ContextType);\n\nfunction Main() {\n  const [state, dispatch] = useReducer(myReducer, initialState);\n\n\n\n  useInterval(() => {\n    saveText(state.text);\n  }, 5000);\n\n  useEffect(()=>{\n    loadText(dispatch);\n  }, []);\n\n  return (\n    <Content.Provider value={{ state, dispatch }}>\n      <App>\n          <EditorPage></EditorPage>\n      </App>\n    </Content.Provider>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport 'reset-css';\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <Main></Main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}